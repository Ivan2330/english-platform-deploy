import json
import redis.asyncio as redis
from typing import Optional
from app.core.config import settings
from datetime import datetime
from enum import Enum


redis_client = redis.from_url(
    settings.redis_url,
    decode_responses=True
)

def custom_serializer(obj):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —Ç–∏–ø—ñ–≤:
    - Enum -> str
    - datetime -> ISO 8601 str
    """
    if isinstance(obj, datetime):
        return obj.isoformat()  # ‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ datetime —É str
    if isinstance(obj, Enum):
        return obj.value  # ‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Enum —É str
    raise TypeError(f"Type {type(obj)} not serializable")

def custom_deserializer(dct):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–Ω–∞—á–µ–Ω—å:
    - –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–∫–∏ —É datetime, —è–∫—â–æ –≤–æ–Ω–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.
    """
    for key, value in dct.items():
        if isinstance(value, str) and (value.endswith("Z") or "T" in value):
            try:
                dct[key] = datetime.fromisoformat(value)  # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–∑–∞–¥ —É datetime
            except ValueError:
                pass
    return dct

async def set_cache(key: str, value: dict, ttl: Optional[int] = 3600):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —É Redis —ñ–∑ TTL (—á–∞—Å–æ–º –∂–∏—Ç—Ç—è —É —Å–µ–∫—É–Ω–¥–∞—Ö).
    """
    serialized_value = json.dumps(value, default=custom_serializer)  # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä
    await redis_client.set(key, serialized_value, ex=ttl)

async def get_cache(key: str) -> Optional[dict]:
    """
    –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ Redis —ñ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î —ó—Ö.
    """
    value = await redis_client.get(key)
    return json.loads(value, object_hook=custom_deserializer) if value else None

# üìä –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑ Redis
async def delete_cache(key: str):
    """
    –í–∏–¥–∞–ª—è—î –¥–∞–Ω—ñ –∑ Redis.
    """
    await redis_client.delete(key)


